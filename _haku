#compdef haku
#
# zsh completion for haku (https://github.com/VladimirMarkelov/haku/)
#
# version:  0.3.0
# github:   https://github.com/shyndman/haku-zsh-completion
#
# contributors:
#   - Scott Hyndman
#
# license:
#
# Copyright (c) 202, Scott Hyndman
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#     * Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#     * Neither the name of the <organization> nor the
#       names of its contributors may be used to endorse or promote products
#       derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#


__haku_recipes() {
    if [[ ! -f "Taskfile" && ! -f "taskfile" && ! -f "Hakufile" && ! -f "hakufile" ]]; then
      return ret=0
    fi

    local -a lines
    lines=(${(f)"$(_call_program commands haku --list 2>&1 | tail -n +2)"})

    for (( i=1; i<=${#lines[@]}; i++ )); do
      local line=${lines[$i]}

      # If we don't have a description, synthesize one
      if [[ ! ("$line" =~ \#) ]]; then
        local recipe_name=`echo "$line" | sed --regexp-extended 's/^\s+([a-zA-Z0-9_-]+)[^$]*$/\1/'`
        line="$recipe_name #(no description for $recipe_name)"
      fi

      line=`echo "$line" | sed --regexp-extended 's/^\s*([a-zA-Z0-9_-]+)[^#]+?(#([^$]+))?$/\1:\3/'`
      lines[$i]=$line
    done

    _describe -t haku-recipes "recipe" lines
}


_haku() {
    local curcontext="$curcontext" state line help="-h --help"
    integer ret=1
    typeset -A opt_args

    _arguments  -C \
        "(: -)"{-h,--help}"[Print usage]" \
        "($help -v --verbose)"{-v,--verbose}"[Display extra information]" \
        "($help)--version[Display application version]" \
        "($help)--dry-run[Dry run: do not external command, only display]" \
        "($help -l --list)"{-l,--list}"[List available recipes]" \
        "($help -): :->recipe" && ret=0

    case $state in
        (recipe)
            __haku_recipes && ret=0
            ;;
    esac

    return ret
}

_haku "$@"

# Local Variables:
# mode: Shell-Script
# sh-indentation: 4
# indent-tabs-mode: nil
# sh-basic-offset: 4
# End:
# vim: ft=zsh sw=4 ts=4 et
